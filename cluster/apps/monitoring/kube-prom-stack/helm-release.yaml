---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: longhorn
      namespace: longhorn-system
  timeout: 20m
  values:
    prometheusOperator:
      createCustomResource: false
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
          slack_api_url: ${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}
        receivers:
          - name: 'null'
          - name: discord
            slack_configs:
              - channel: '#prometheus'
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: Prometheus
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: [alertname, job]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: discord
          routes:
            - receiver: 'null'
              match_re:
                alertname: Watchdog|etcdHighNumberOfFailedGRPCRequests
            - receiver: discord
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: critical
            target_match:
              severity: warning
            equal: [alertname, namespace]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          hajimari.io/enable: 'true'
          hajimari.io/icon: alert-circle
          hajimari.io/appName: Alert-manager
          nginx.ingress.kubernetes.io/auth-url: https://auth.${SECRET_DOMAIN}/oauth2/auth
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}/oauth2/start
        hosts:
          - alert-manager.${SECRET_DOMAIN}
        tls:
          - hosts:
              - alert-manager.${SECRET_DOMAIN}
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    grafana:
      enabled: false
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 172.17.2.1
        - 172.17.2.2
        - 172.17.2.3
    kubeScheduler:
      enabled: true
      endpoints:
        - 172.17.2.1
        - 172.17.2.2
        - 172.17.2.3
    kubeProxy:
      enabled: true
      endpoints:
        - 172.17.2.1
        - 172.17.2.2
        - 172.17.2.3
    kubeEtcd:
      enabled: true
      endpoints:
        - 172.17.2.1
        - 172.17.2.2
        - 172.17.2.3
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    kubelet:
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          hajimari.io/enable: 'true'
          hajimari.io/icon: torch
          hajimari.io/appName: Prometheus
          nginx.ingress.kubernetes.io/auth-url: https://auth.${SECRET_DOMAIN}/oauth2/auth
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}/oauth2/start
        hosts:
          - prometheus.${SECRET_DOMAIN}
        tls:
          - hosts:
              - prometheus.${SECRET_DOMAIN}
      prometheusSpec:
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 672h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 30Gi
